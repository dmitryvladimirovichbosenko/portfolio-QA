1. Файл "Autorization one" — проверка входа и доступа к профилю
Auth — мы отправляем правильный логин и пароль, чтобы войти. Сервер должен сказать «всё ок» и выдать специальный ключ (токен), который подтверждает, что мы авторизованы.

negative — мы отправляем неправильный логин и пароль. Сервер должен отказать и сказать «не авторизовано».

profile — мы просим показать профиль пользователя, передавая полученный ранее ключ (токен). Сервер должен вернуть данные профиля.

without token — пытаемся получить профиль без ключа. Сервер должен отказать и сообщить, что ключ не передан.

GET profile — wrong token — передаём неправильный ключ. Сервер должен отказать и сказать, что доступ запрещён.

2. Файл "country" — работа со списком стран
get country — просим сервер вернуть информацию о странах, столицах и регионах по заданным фильтрам.

add country — добавляем новую страну с её столицей и регионом.

edit country — меняем данные о стране (например, название или столицу).

del country — удаляем страну по её названию.

3. Файл "petstore" — работа с базой питомцев
geo pet by status — просим список питомцев по их статусу (продаётся, продан, в ожидании).

get pet by id — получаем данные конкретного питомца по его номеру.

add pet — добавляем нового питомца в базу.

upload image — загружаем фото питомца.

update pet — полностью обновляем информацию о питомце.

update pet via form-data — частично меняем данные питомца (например, только имя или статус).

delete pet — удаляем питомца по его номеру.

4. Файл "store" — заказы
add order — создаём новый заказ на питомца.

Get order — получаем данные о заказе по его номеру.

Delete order — удаляем заказ по его номеру.

5. Файл "toDo list" — список задач
get all — просим сервер вернуть все задачи в списке дел (например, как в приложении «Напоминания»).

6. Файл "User" — работа с пользователями
create user — создаём одного нового пользователя.

create users array — создаём сразу нескольких пользователей.

get user name — получаем информацию о пользователе по имени.

update user — меняем данные пользователя.

get user login — входим в систему под пользователем (логин + пароль).

get user logout — выходим из системы.

del user name — удаляем пользователя по имени.










Autorization one (логин и доступ к профилю)
1) Auth
Зачем: убедиться, что с правильными логином/паролем сервер впускает и выдаёт ключ-доступ (токен).

Что проверяем (ресурс): POST {{base_url}}/auth — отправляем { "username": "test", "password": "test123" }.

Что ожидаем: статус 200 OK и в ответе поле token. Этот токен потом используем в других запросах.

2) negative
Зачем: проверить, что с неправильными данными вход закрыт.

Что проверяем (ресурс): POST {{base_url}}/auth — отправляем неверные логин/пароль.

Что ожидаем: статус 401 Unauthorized.

3) profile
Зачем: проверить доступ к профилю, если у нас есть правильный токен.

Что проверяем (ресурс): GET {{base_url}}/profile — передаём в заголовке Authorization: Bearer {{token}}.

Что ожидаем: статус 200 OK и в ответе объект с user (данные профиля).

4) without token
Зачем: убедиться, что без токена защищённую информацию получить нельзя.

Что проверяем (ресурс): GET {{base_url}}/profile — без заголовка авторизации.

Что ожидаем: статус 401 Unauthorized и сообщение "No token provided".

5) GET profile — wrong token
Зачем: проверить защиту от «левого»/испорченного токена.

Что проверяем (ресурс): GET {{base_url}}/profile — Authorization: Bearer wrong-token.

Что ожидаем: статус 403 Forbidden и сообщение "Forbidden".

мини-заметка: в этой коллекции можно (и удобно) хранить токен в переменной окружения {{token}}, чтобы не копировать его вручную в каждый запрос.

country (страны: чтение/добавление/изменение/удаление)
1) get country
Зачем: убедиться, что фильтры работают и сервер отдаёт нужные данные.

Что проверяем (ресурс):
GET http://localhost/country/api/get_country.php?country=japan&capital=Canberra&region=Africa

Что ожидаем: статус 200 OK и JSON с подходящими данными по стране/столице/региону.

2) add country
Зачем: проверить добавление новой записи.

Что проверяем (ресурс): POST http://localhost/country/api/add_country.php с телом:

json
Копировать
Редактировать
{ "country": "Japan2", "capital": "Tokyo2", "region": "Asia" }
Что ожидаем: 200 OK и подтверждение, что страна добавлена (или возвращённая новая запись).

3) edit country
Зачем: убедиться, что запись можно обновить.

Что проверяем (ресурс): PUT http://localhost/country/api/edit_country.php с телом:

json
Копировать
Редактировать
{ "country": "Japan2", "newCountry": "Netherlands", "newCapital": "Amsterdam" }
Что ожидаем: 200 OK и обновлённые данные.

4) del country
Зачем: проверить удаление записи.

Что проверяем (ресурс):
DELETE http://localhost/country/api/delete_country.php?country=Netherlands

Что ожидаем: 200 OK и подтверждение, что запись удалена.

petstore (питомцы: поиск/добавление/обновление/удаление/загрузка фото)
1) geo pet by status
Зачем: проверить фильтрацию по статусу.

Что проверяем (ресурс):
GET https://petstore.swagger.io/v2/pet/findByStatus?status=pending,sold,available

Что ожидаем: 200 OK и список питомцев, у которых статус входит в переданные.

2) get pet by id
Зачем: убедиться, что можно получить питомца по ID.

Что проверяем (ресурс): GET https://petstore.swagger.io/v2/pet/1001867

Что ожидаем: 200 OK и полные данные питомца с ID 1001867.

3) add pet
Зачем: проверить создание записи о питомце.

Что проверяем (ресурс): POST https://petstore.swagger.io/v2/pet — в теле JSON с полями (id, category, name, photoUrls, tags, status).

Что ожидаем: 200 OK и возвращённый объект созданного питомца.

4) upload image
Зачем: проверить загрузку фото для питомца.

Что проверяем (ресурс):
POST https://petstore.swagger.io/v2/pet/1001867/uploadImage — form-data с полем file.

Что ожидаем: 200 OK и сообщение/данные о результате загрузки.

5) update pet
Зачем: проверить полное обновление данных.

Что проверяем (ресурс): PUT https://petstore.swagger.io/v2/pet — JSON с актуальными полями питомца.

Что ожидаем: 200 OK и обновлённый объект.

6) update pet via form-data
Зачем: проверить частичное обновление (например, только имя/статус).

Что проверяем (ресурс):
POST https://petstore.swagger.io/v2/pet/1001867 — x-www-form-urlencoded с полями name, status.

Что ожидаем: 200 OK и изменённые поля у питомца 1001867.

7) delete pet
Зачем: убедиться, что удаление по ID работает и (если нужно) учитывает ключ API.

Что проверяем (ресурс): DELETE https://petstore.swagger.io/v2/pet/1001867 (+ заголовок api_key, если требуется).

Что ожидаем: 200 OK и подтверждение удаления.

store (заказы на питомцев)
1) add order
Зачем: проверить создание заказа.

Что проверяем (ресурс):
POST https://petstore.swagger.io/v2/store/order/ — JSON:

json
Копировать
Редактировать
{
  "id": 1234,
  "petId": 123,
  "quantity": 1,
  "shipDate": "2025-07-08T14:21:00.664Z",
  "status": "placed",
  "complete": true
}
Что ожидаем: 200 OK и созданный заказ с этими данными.

2) Get order
Зачем: убедиться, что заказ можно получить по номеру.

Что проверяем (ресурс):
GET https://petstore.swagger.io/v2/store/order/{orderId} (подставляем 1234).

Что ожидаем: 200 OK и JSON заказа с ID 1234.

3) Delete order
Зачем: проверить удаление заказа.

Что проверяем (ресурс):
DELETE https://petstore.swagger.io/v2/store/order/{orderId} (подставляем 1234).

Что ожидаем: 200 OK и подтверждение удаления.

toDo list (список задач)
1) get all
Зачем: убедиться, что можно получить весь список задач.

Что проверяем (ресурс): GET <указать URL вашего сервиса> (в коллекции URL пока пустой).

Что ожидаем: 200 OK и массив задач вида:

json
Копировать
Редактировать
[
  { "id": 1, "title": "Помыть машину", "completed": false },
  ...
]
User (пользователи)
1) create user
Зачем: проверить создание одного пользователя.

Что проверяем (ресурс): POST https://petstore.swagger.io/v2/user/ — JSON с полями пользователя.

Что ожидаем: 200 OK и подтверждение/объект созданного пользователя.

2) create users array
Зачем: проверить массовое создание сразу нескольких пользователей.

Что проверяем (ресурс): POST https://petstore.swagger.io/v2/user/createWithArray — массив JSON-объектов.

Что ожидаем: 200 OK и подтверждение.

3) get user name
Зачем: убедиться, что данные по пользователю можно получить по имени.

Что проверяем (ресурс): GET https://petstore.swagger.io/v2/user/{username} (например, boris).

Что ожидаем: 200 OK и JSON с данными этого пользователя.

4) update user
Зачем: проверить обновление данных пользователя.

Что проверяем (ресурс): PUT https://petstore.swagger.io/v2/user/{username} — JSON с новыми данными.

Что ожидаем: 200 OK и обновлённый объект/подтверждение.

5) get user login
Зачем: проверить вход по логину и паролю.

Что проверяем (ресурс):
GET https://petstore.swagger.io/v2/user/login?username=boris&password=123
(в твоей коллекции параметр пароля был назван с опечаткой — поправь на password)

Что ожидаем: 200 OK и сообщение об успешном входе (сервер может выдать токен/сессию).

6) get user logout
Зачем: убедиться, что выход из системы работает.

Что проверяем (ресурс): GET https://petstore.swagger.io/v2/user/logout

Что ожидаем: 200 OK и подтверждение выхода.

7) del user name
Зачем: проверить удаление пользователя.

Что проверяем (ресурс): DELETE https://petstore.swagger.io/v2/user/{username} (например, boris34).

Что ожидаем: 200 OK и подтверждение удаления.

Хочешь, доведём это до идеала для портфолио?
Я могу:

пометить, где позитивные (успешные) сценарии, а где негативные (ошибки/запреты);

добавить «чек-лист» ожидаемых кодов ответов и ключевых полей;

подготовить README.md для GitHub с этими блоками, чтобы HR/инженер сразу понял, что и как запускать.