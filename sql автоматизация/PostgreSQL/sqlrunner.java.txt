package db;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class SqlRunner {

    // üëâ –ü–æ–º–µ–Ω—è–π –¥–æ—Å—Ç—É–ø—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    private static final String URL  = "jdbc:postgresql://localhost:5432/postgres?sslmode=disable";
    private static final String USER = "postgres";
    private static final String PASS = "1234";

    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("–£–∫–∞–∂–∏ –ø—É—Ç—å –∫ .sql —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ —Å .sql: –Ω–∞–ø—Ä–∏–º–µ—Ä\n  java db.SqlRunner scripts/init.sql\n  java db.SqlRunner scripts");
            return;
        }

        Path path = Paths.get(args[0]);
        if (!Files.exists(path)) {
            System.err.println("–§–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: " + path.toAbsolutePath());
            return;
        }

        List<Path> files = new ArrayList<>();
        try {
            if (Files.isDirectory(path)) {
                try (DirectoryStream<Path> ds = Files.newDirectoryStream(path, "*.sql")) {
                    for (Path p : ds) files.add(p);
                }
                files.sort(null); // –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            } else {
                files.add(path);
            }
        } catch (IOException e) {
            System.err.println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: " + e.getMessage());
            return;
        }

        try (Connection conn = DriverManager.getConnection(URL, USER, PASS)) {
            conn.setAutoCommit(false);
            System.out.println("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL. –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ " + files.size() + " —Ñ–∞–π–ª–∞(–æ–≤).");

            for (Path sqlFile : files) {
                System.out.println("\n‚ñ∂ –í—ã–ø–æ–ª–Ω—è—é: " + sqlFile.getFileName());
                String sql = Files.readString(sqlFile, StandardCharsets.UTF_8);
                List<String> statements = splitSql(sql);

                try (Statement st = conn.createStatement()) {
                    for (String s : statements) {
                        String trimmed = s.trim();
                        if (trimmed.isEmpty()) continue;

                        boolean hasResultSet = st.execute(trimmed);
                        if (hasResultSet) {
                            try (ResultSet rs = st.getResultSet()) {
                                printResultSet(rs, 50);
                            }
                        } else {
                            int upd = st.getUpdateCount();
                            System.out.println("‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: " + (upd < 0 ? 0 : upd));
                        }
                    }
                }
            }

            conn.commit();
            System.out.println("\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã (COMMIT).");
        } catch (Exception e) {
            System.err.println("\n‚ùå –û—à–∏–±–∫–∞, –æ—Ç–∫–∞—Ç—ã–≤–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (ROLLBACK):");
            e.printStackTrace();
        }
    }

    // --- –†–µ–∂–µ–º SQL –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ ';', —É–≤–∞–∂–∞—è —Å—Ç—Ä–æ–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ $$‚Ä¶$$ ---
    private static List<String> splitSql(String sql) {
        List<String> out = new ArrayList<>();
        StringBuilder cur = new StringBuilder();

        boolean inSingle = false; // –≤–Ω—É—Ç—Ä–∏ '...'
        boolean inLineComment = false; // -- –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
        boolean inBlockComment = false; // /* ... */
        boolean inDollar = false; // –ø—Ä–æ—Å—Ç–æ–π $$ ... $$ (–±–µ–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤)

        for (int i = 0; i < sql.length(); i++) {
            char c = sql.charAt(i);
            char n = (i + 1 < sql.length()) ? sql.charAt(i + 1) : '\0';

            // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if (!inSingle && !inDollar) {
                if (!inBlockComment && !inLineComment && c == '-' && n == '-') {
                    inLineComment = true;
                } else if (!inBlockComment && !inLineComment && c == '/' && n == '*') {
                    inBlockComment = true;
                    i++; // –ø—Ä–æ–≥–ª–æ—Ç–∏—Ç—å '*'
                    continue;
                } else if (inBlockComment && c == '*' && n == '/') {
                    inBlockComment = false;
                    i++;
                    continue;
                } else if (inLineComment && (c == '\n' || c == '\r')) {
                    inLineComment = false;
                }

                if (inBlockComment || inLineComment) {
                    // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    continue;
                }
            }

            // —Å—Ç—Ä–æ–∫–∏ –∏ dollar-quoting
            if (!inDollar && c == '\'' && !inLineComment && !inBlockComment) {
                // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –æ–¥–∏–Ω–∞—Ä–Ω–æ–π –∫–∞–≤—ã—á–∫–æ–π (Postgres —É–¥–≤–∞–∏–≤–∞–µ—Ç –∏—Ö)
                inSingle = !inSingle;
                cur.append(c);
                continue;
            }
            if (!inSingle && !inLineComment && !inBlockComment && c == '$' && n == '$') {
                inDollar = !inDollar; // –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–∑ $$...$$
                cur.append(c).append(n);
                i++;
                continue;
            }

            // —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –≤–Ω–µ —Å—Ç—Ä–æ–∫/$$/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if (c == ';' && !inSingle && !inDollar && !inLineComment && !inBlockComment) {
                out.add(cur.toString());
                cur.setLength(0);
                continue;
            }

            cur.append(c);
        }

        if (cur.toString().trim().length() > 0) {
            out.add(cur.toString());
        }
        return out;
    }

    private static void printResultSet(ResultSet rs, int limit) throws SQLException {
        ResultSetMetaData md = rs.getMetaData();
        int cols = md.getColumnCount();

        // –∑–∞–≥–æ–ª–æ–≤–∫–∏
        StringBuilder header = new StringBuilder();
        for (int i = 1; i <= cols; i++) {
            if (i > 1) header.append(" | ");
            header.append(md.getColumnLabel(i));
        }
        System.out.println(header);

        // —Å—Ç—Ä–æ–∫–∏
        int shown = 0;
        while (rs.next() && shown < limit) {
            StringBuilder row = new StringBuilder();
            for (int i = 1; i <= cols; i++) {
                if (i > 1) row.append(" | ");
                row.append(rs.getString(i));
            }
            System.out.println(row);
            shown++;
        }
        if (!rs.isClosed() && shown == limit) {
            System.out.println("‚Ä¶ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ " + limit + " —Å—Ç—Ä–æ–∫)");
        }
    }
}
