README — SQL сценарии (AdventureWorks2017)
1) SQLQuery1.sql
Что делает: выбирает все красные товары с ценой ≥ 100, показывает название товара и его категорию (через подкатегорию). 

Что проверяем/зачем: фильтрацию по атрибутам (цвет, цена) и корректные связи товар → подкатегория → категория.

2) SQLQuery2.sql
Что делает: ищет дубликаты названий подкатегорий: сколько раз встречается каждое имя; выводит только те, что встречаются > 1 раза. 

Что проверяем/зачем: обнаружение потенциальной «грязи» в справочнике (дубли имен).

3) SQLQuery2(1).sql
Что делает: подробно показывает все записи-дубликаты подкатегорий: их ID, имя, а также к какой категории они относятся. 

Что проверяем/зачем: аудит данных — можно ли перечислить все дубли и понять, в каких категориях они живут.

4) SQLQuery3.sql
Что делает: считает, сколько товаров в каждой категории, сортирует по убыванию. 

Что проверяем/зачем: «распределение ассортимента» по категориям — где товаров больше всего.

5) SQLQuery4.sql
Что делает: считает, сколько товаров в каждой подкатегории; использует LEFT JOIN, поэтому подкатегории без товаров тоже попадут в результат. Сортировка по названию подкатегории. 

Что проверяем/зачем: полный снимок подкатегорий с учётом «пустых» веток.

6) SQLQuery5.sql
Что делает: выводит ТОП-3 подкатегории с наименьшим количеством товаров (учитывает и пустые). 

Что проверяем/зачем: поиск «узких» мест каталога — где минимальное наполнение.

7) SQLQuery6.sql
Что делает: для каждой подкатегории находит максимальную цену среди красных товаров; сортирует по убыванию. 

Что проверяем/зачем: верхнюю планку цен по цвету/подкатегории (полезно для прайс-аналитики).

8) SQLQuery7.sql
Что делает: показывает поставщиков и сколько разных товаров каждый поставляет; сортирует от самых «широких» к узким. 

Что проверяем/зачем: широту ассортимента у поставщиков (какие — ключевые).

9) SQLQuery8.sql
Что делает: находит товары, у которых > 1 поставщика, и считает, сколько поставщиков у каждого такого товара. 

Что проверяем/зачем: дублируемость/резервирование по цепочке поставок (где есть альтернатива поставщикам).

10) SQLQuery9.sql
Что делает: ищет самый продаваемый товар по общей сумме заказанного количества (TOP 1). 

Что проверяем/зачем: лидера продаж (по штукам), пригодно для ABC-анализа.

11) SQLQuery10.sql
Что делает: поднимаясь от заказа к товару и далее к подкатегории и категории, считает сколько всего штук продано в каждой категории и берёт категорию-лидера (TOP 1). 

Что проверяем/зачем: какая категория в целом продаётся лучше всех (по объёму).

12) SQLQuery11.sql
Что делает: по каждой категории считает сколько подкатегорий и сколько товаров (через LEFT JOIN, поэтому пустые ветки тоже видны). Сортировка по названию категории. 

Что проверяем/зачем: «структуру каталога» — глубину (подкатегории) и плотность (товары) по каждой категории.

13) SQLQuery12.sql
Что делает: группирует поставщиков по кредитному рейтингу и считает, скольким разным товарам соответствуют поставщики каждого рейтинга. 

Что проверяем/зачем: связь «надёжность/рейтинг ↔ широта ассортимента» у поставщиков.